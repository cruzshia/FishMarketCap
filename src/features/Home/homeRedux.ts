import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { RootState } from '@/providers/store'
import { fetchExchangeList, Exchange } from './homeApi'
import { statusSubject } from '@/utils/status'

export interface HomeState {
  exchangeList: Exchange[]
}

const initialState: HomeState = {
  exchangeList: []
}

export const fetchExchangeListAsync = createAsyncThunk('home/fetchExchangeList', async () => {
  const response = await fetchExchangeList()
  return response.data
})

export const homeSlice = createSlice({
  name: 'home',
  initialState,
  reducers: {
    setExchangeListAct: (state, action) => {
      state.exchangeList = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchExchangeListAsync.pending, () => {
        statusSubject.next({ loading: true })
      })
      .addCase(fetchExchangeListAsync.fulfilled, (state, action) => {
        state.exchangeList = action.payload
        statusSubject.next({ success: true })
      })
      .addCase(fetchExchangeListAsync.rejected, () => {
        statusSubject.next({ failed: true })
      })
  }
})

export const { setExchangeListAct } = homeSlice.actions

export const selectExchangeList = (state: RootState) => state.home.exchangeList

export default homeSlice.reducer
